# -*- coding: utf-8 -*-
"""streamlit_app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1geQr0a7UA7zVpur0YKLeVg3iNM8ULyWw
"""

# streamlit_app.py

import streamlit as st
from tensorflow.keras.applications import VGG16
from tensorflow.keras.models import Model
from tensorflow.keras.applications.vgg16 import preprocess_input
from tensorflow.keras.preprocessing import image
from sklearn.metrics.pairwise import cosine_similarity
import numpy as np
from PIL import Image
import os

# Load VGG16 model up to 'fc1' layer
@st.cache_resource
def load_model():
    base_model = VGG16(weights='imagenet')
    return Model(inputs=base_model.input, outputs=base_model.get_layer('fc1').output)

model = load_model()

# Feature extraction function
def extract_features(img):
    img = img.resize((224, 224)).convert('RGB')
    img_data = image.img_to_array(img)
    img_data = np.expand_dims(img_data, axis=0)
    img_data = preprocess_input(img_data)
    features = model.predict(img_data)
    return features

# Score calculation
def calculate_similarity_score(img1, img2):
    features1 = extract_features(img1)
    features2 = extract_features(img2)
    score = cosine_similarity(features1, features2)[0][0]
    return round(score * 100, 2)

# Feedback

def generate_feedback(score):
    if score >= 90:
        return "Excellent! Highly similar to the original."
    elif score >= 70:
        return "Good! Close to the original with minor differences."
    elif score >= 50:
        return "Average. Needs improvement in some areas."
    else:
        return "Poor. Too different from the original."

# Streamlit UI
st.title("ðŸŽ“ Graphic Design Assignment Evaluator")
st.write("Upload your assignment and the original design to get an evaluation score.")

col1, col2 = st.columns(2)

with col1:
    original_file = st.file_uploader("Upload Original Design", type=["jpg", "png", "jpeg"], key="original")

with col2:
    student_file = st.file_uploader("Upload Your Submission", type=["jpg", "png", "jpeg"], key="submission")

if original_file and student_file:
    original_image = Image.open(original_file)
    student_image = Image.open(student_file)

    st.image([original_image, student_image], caption=["Original Design", "Student Submission"], width=250)

    with st.spinner("Evaluating..."):
        score = calculate_similarity_score(original_image, student_image)
        feedback = generate_feedback(score)

    st.success("âœ… Evaluation Complete")
    st.markdown(f"### ðŸ§® Score: **{score} / 100**")
    st.markdown(f"### ðŸ’¬ Feedback: _{feedback}_")
else:
    st.info("Please upload both images to proceed.")

